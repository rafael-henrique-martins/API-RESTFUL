36. Criando o controller de clientes
os controladores rest recebem requisições http e se comunicaç dentro da arquitetura resty
como fazer para a classe entender isso?
 precisa da dependencia de starter-web

e colocar o @Controller na classe
aqui fica as urls de acesso

@RequestMapping("/api/clientes") todas as requisições com esse inicio cai nessa classe

e dentro do metodo posso colocar, ele vem depois do da clase
@RequestMapping("/hello)
@RequestMapping("/hello/{nome}")
dessa forma ele pega o que vem na requisição depois do hello/

ex: localhost:9090/api/clientes/hello/rafael

o codigo pega o rafael

@Controller
public class ClientController {

    @RequestMapping(value = "api//clientes/{nome}", method = RequestMethod.GET)
    @ResponseBody
    public String hello(@PathVariable("nome") String nomeCliente) {
        return nomeCliente;
    }
}


37. Mapeando as Requisições com Request Mapping
Quando for mais de uma url que o cliente pode acessar o metodo
@RequestMapping(value = {"api//clientes/{nome}","api//clientes/banana" } method = RequestMethod.GET)

posso colocar o consumer = { tipo do arquivo que vai chegar}

@Controller
public class ClientController {

    @RequestMapping(value = "api//clientes/{nome}", method = RequestMethod.POST,
            consumes = {"application/json", "application/xml"})
    @ResponseBody
    public String hello(@PathVariable("nome") String nomeCliente) {
        return nomeCliente;
    }
}


produces = a forma que eu vou retornar os dados
@RequestMapping(value = "api//clientes/{nome}", method = RequestMethod.GET,
            consumes = {"application/json", "application/xml"},
            produces = {"application/json", "application/xml"})



38. Requisição GET com parâmentros e Response Entity
buscano um cliente usando um id
@Controller
public class ClientController {

    @GetMapping("api/clientes/{id}")
    @ResponseBody
    public ResponseEntity<Cliente> getClieneteById(@PathVariable Integer id) {

    }
}

mas agora preciso ir no meu banco de dados e buscar esse clienete
ResponseEntity = corresponde ao corpo dentro da resposta

@GetMapping("api/clientes/{id}")
    @ResponseBody
    public ResponseEntity<Cliente> getClieneteById(@PathVariable Integer id) {
        Optional<Cliente> cliente = clientes.findById(id);
        if (cliente.isPresent()) {
            return ResponseEntity.ok(cliente.get());
        }
        return ResponseEntity.notFound().build();

    }

39. Requisicão POST e Request Body
@RequestBody =  é o que esta chegando, o que vem na requisição
@ResponseBody = é o que vou retornar

 @PostMapping("api/clientes")
    @ResponseBody
    public ResponseEntity save(@RequestBody Cliente cliente) {
        Cliente clientesalvo = clientes.save(cliente);
        return ResponseEntity.ok(clientesalvo);
    }

exemplo de reuqisição:
{
"nome": "rafael"
}

No retorno da requisição esta voltando um campo que nao quero que volte, pedido desse clienet
para não aparecer isso eu coloco o @JsonIgnore

    @JsonIgnore
    @OneToMany(mappedBy = "cliente", fetch = FetchType.LAZY)
    private Set<Pedido> pedidos;


40. Delete Mapping: deletando um recurso no servidor
noContent() é um status de sucesso, porem não preciso retornar nada

@DeleteMapping("api/clientes/{id}")
    @ResponseBody
    public ResponseEntity delete(@PathVariable Integer id) {
        Optional<Cliente> cliente = clientes.findById(id);
        if (cliente.isPresent()) {
            clientes.delete(cliente.get());
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }


41. Put Mapping - Atualizando um cliente
nesse trecho de codigo:
findById(id).map(clienteExistente -> {
            cliente.setId(clienteExistente.getId());

o .map serve como um if, se caso achar o id vai executar algo
@PutMapping("/api/clientes/{id}")
    @ResponseBody
    public ResponseEntity update(@PathVariable Integer id, @RequestBody Cliente cliente ) {
        return clientes.findById(id).map(clienteExistente -> {
            cliente.setId(clienteExistente.getId());
            clientes.save(cliente);
            return ResponseEntity.noContent().build();
        }).orElseGet(() -> ResponseEntity.noContent().build());
    }


como enviar essa requisião?
@PathVariable vai na url /api/clientes/1

RequestBody vai no json


42. Pesquisa de Clientes por parâmetros
Example do springframework - ele pega um objeto(no caso filtro) pega as propriedades que stão populadas
e vai criar um example

ExampleMatcher - permite que faça algumas configurações para ele encontarr oo clientes atraves das propriedades
desntro desse metodo posso colocar
.withIgnoreCase - os valores que forem strings independentes deles estarem com caixa alta ou caixa baixa eu quero
que ele considere na hora de encontrar o nome do cliente ou cpf
.withStringMatcher() - é a forma que eu vou definir pra ele enconrar os valores string
.withStringMatcher(.STARTING) - deve começar com os valores que foi populada no filtro
.withStringMatcher(.CONTAINING) - exemplo que eu queira os clientes que tenham a letra a no nome, ele vai encontrar o que bater com a string que eu passei

@GetMapping("/api/clientes")
    @ResponseBody
    public ResponseEntity find(Cliente filtro) {
        ExampleMatcher matcher = ExampleMatcher.matching()
                .withIgnoreCase()
                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING);
        Example example = Example.of(filtro, matcher);
        List<Cliente> lista = clientes.findAll(example);
        return ResponseEntity.ok(lista);
    }



posso fazer a requisição sem enviar parametros ou colocar na requisição assim
api/clientes?nome=rafa


43. @ResponseStatus e @RestController: Refatorando api de clientes
Uma forma mais facil de se trabalhar com COntroler

@RestControler - quer disser uqe posso tirar o @ResponseBory dos meus metodos
posso colocaar o REquestMapping("api/clientes") posso eliminar do restante do codigo

por padrão, quando não coloco o endereço completo dentro do @GetMapping() ele retorno 200 na quesição, mas preciso especificar para retornar outra coisa sem ser 200

ResponseStatusException - o proprio spring entrega pra mim retornar a mensagem de erro para o cliente
ResponseStatusException('Cliente não encontrado", HttpStatus.NOT_FOUND)
@GetMapping("/{id}")
    public Cliente getClieneteById(@PathVariable Integer id) {
        Optional<Cliente> cliente = clientes.findById(id);
        if (cliente.isPresent()) {
            return cliente.get();
        }
        throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Cliente não encontrado");

    }

ou
@GetMapping("/{id}")
    public Cliente getClieneteById(@PathVariable Integer id) {
        return clientes
                .findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cliente não encontrado"));
    }


Atribindo um codigo de status diferente, dexemplo criação é 201 mas euestou retornando 200
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)

o delte retorna void




 -----------------------------CRUD ----------------------------
  *********************************getClieneteById

 @GetMapping("/{id}")
     public Cliente getClieneteById(@PathVariable Integer id) {
         return clientes
                 .findById(id)
                 .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cliente não encontrado"));
     }
 *********************************Post
     @PostMapping
     @ResponseStatus(HttpStatus.CREATED)
     public Cliente save(@RequestBody Cliente cliente) {
         return clientes.save(cliente);
     }
  *********************************Delete
     @DeleteMapping("/{id}")
     @ResponseStatus(HttpStatus.NO_CONTENT)
     public void delete(@PathVariable Integer id) {
         clientes.findById(id)
                 .map( cliente -> {
                     clientes.delete(cliente); return Void.class;
                 })
                 .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cliente não encontrado"));
     }
  *********************************Put
     @PutMapping("/{id}")
     @ResponseStatus(HttpStatus.NO_CONTENT)
     public void update(@PathVariable Integer id, @RequestBody Cliente cliente) {
         clientes.findById(id).map(clienteExistente -> {
             cliente.setId(clienteExistente.getId());
             clientes.save(cliente);
             return clienteExistente;
         }).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cliente não encontrado"));

     }

     @GetMapping
     public List<Cliente> find(Cliente filtro) {
         ExampleMatcher matcher = ExampleMatcher.matching()
                 .withIgnoreCase()
                 .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING);
         Example example = Example.of(filtro, matcher);
         return clientes.findAll(example);
     }







48. Criação de Controllers e Service de pedidos
(Service) seria uma (Interface) que nada mais é do que um contrato, ou seja uma regra que obriga a
classe que irá implementar essa interface a usar os metodos definidos nela, ou seja (Service) tem um
conjunto de metodos definidos, mais não implementados e a (ServiceImpl) implementa a interface (Service)
ou seja a (ServiceImpl) é obrigatória a implementar todos os metodos definidos na interface (Service)

Ajuda nos testes unitarios e E2E
Classe Service = Interface
Classe serviceImpll = classe
1- Anoto a classe Serviceimpl como @Service
2- coloco implemesnts PedidoService
3- em SERVICEIMPL é onde eu acesso meu repository

No controller eu intancio a classe Service


@RestController
@RequestMapping("/{api/pedidos}")
public class PedidoController {

    private PedidoService service;

    public PedidoController(PedidoService service) {
        this.service = service;
    }


@Service
public class PedidoServiceImpl implements PedidoService {

    private Pedidos repository;

    public PedidoServiceImpl(Pedidos repository) {
        this.repository = repository;
    }
}


49. Trabalahndo com modelo DTO
Analisar a estrutura da arquitetura e definir com vai ser o json que vai chegar na requisição
com isso podemos criar uma classe pra receber essa requisição

arquitetura

1 Cliente - 1 ou muitos Pedidos - 1 para muitos
1 Pedido - 1 - ou muitos itens - 1 para muitos
1 Produto - 1 ou muitos itens 1 - para muitos


Json /pedidos
{
"cliente": 1,
"total": 10,
"itens": [{
          "produto": 1,
          "quantidade":10
          }]
}
}

com base nele eu crio um DTO data-trasfer-object
esa classe serve para agente mapear um objeto com propriedades simples e recebe ele via requisição e depois
pega os dados e cria nosso modelo de dados para persistir


public class PedidoDTO {
    private Integer cliente;
    private BigDecimal total;
    private List<ItemPedidoDTO> items;
}



50. Utilizando o processo Lombok
ela elimina a nessecidade da criação dos geters e seters

da pra entrar no site dele e pegar a dependencia
<dependencies>
	<dependency>
		<groupId>org.projectlombok</groupId>
		<artifactId>lombok</artifactId>
		<version>1.18.24</version>
		<scope>provided</scope>
	</dependency>
</dependencies>

tirando os geters e seter e construtores da classe entity
@Getter
@Setter
@ToString
@EqualsAndHashCode -
@NoArgsConstructor - construtor sem argumentos
@AllArgsConstructor
@Data - é uma compilação de algumas da anotations acima
    @Getter
    @Setter
    @ToString
    @EqualsAndHashCode


exemplo para não retornar uma lista nula
public List<ItemPedido> getItens(){
        if(this.itens == null){
            this.itens = new ArrayList<>();
        }
        return this.itens;
    }

@RequiredArgsConstructor - gera um construto com todos os argumentos obrigatorios do entity, os que tem que ser
instanciados na criação da clasee esse são chamdos de final

ex:
@Service
@RequiredArgsConstructor
public class PedidoServiceImpl implements PedidoService {
    @Autowired
    private final Pedidos repository;









